// ========================================
// Cookie Routes - Qu·∫£n l√Ω Netflix cookies
// ========================================

const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const Cookie = require('../models/Cookie');

// GET /api/cookies/guest - L·∫•y cookie Netflix cho guest
router.get('/guest', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { skipCurrent, excludeIds } = req.query;
        
        console.log('üç™ Cookie request from user:', req.user.email, 'ID:', userId);
        console.log('üìã Request params:', { skipCurrent, excludeIds });
        
        const User = require('../models/User');
        const user = await User.findById(userId);
        
        if (!user) {
            console.log('‚ùå User not found:', userId);
            return res.status(404).json({ error: 'User not found' });
        }
        
        // Pro users get dedicated cookie (1 user/cookie)
        // Free users share cookie (4 users/cookie)
        
        let cookie = null;
        
        // N·∫øu KH√îNG y√™u c·∫ßu b·ªè qua cookie hi·ªán t·∫°i, t√¨m cookie ƒëang ƒë∆∞·ª£c user s·ª≠ d·ª•ng
        if (skipCurrent !== 'true') {
            cookie = await Cookie.findOne({ 
                currentUsers: userId,
                isActive: true 
            });
            
            console.log('üîç Existing cookie for user:', cookie ? `#${cookie.cookieNumber}` : 'None');
        } else {
            console.log('‚è≠Ô∏è Skipping current cookie as requested');
        }
        
        // N·∫øu ch∆∞a c√≥ cookie, t√¨m cookie available
        if (!cookie) {
            console.log('üîç Searching for available cookie...');
            
            // Build query
            let query = {
                isActive: true,
                $expr: { $lt: [{ $size: "$currentUsers" }, "$maxUsers"] },
                $or: [
                    { expiresAt: null },
                    { expiresAt: { $gt: new Date() } }
                ]
            };
            
            // B·ªè qua cookie hi·ªán t·∫°i n·∫øu y√™u c·∫ßu
            if (skipCurrent === 'true') {
                query.currentUsers = { $ne: userId };
            }
            
            // B·ªè qua c√°c cookie ƒë√£ th·ª≠ (excludeIds)
            if (excludeIds) {
                try {
                    // Parse excludeIds - c√≥ th·ªÉ l√† string ho·∫∑c array
                    let idsToExclude = [];
                    if (typeof excludeIds === 'string') {
                        // N·∫øu l√† string, c·ªë g·∫Øng parse JSON ho·∫∑c split b·∫±ng d·∫•u ph·∫©y
                        try {
                            idsToExclude = JSON.parse(excludeIds);
                        } catch {
                            idsToExclude = excludeIds.split(',').map(id => id.trim()).filter(id => id);
                        }
                    } else if (Array.isArray(excludeIds)) {
                        idsToExclude = excludeIds;
                    }
                    
                    if (idsToExclude.length > 0) {
                        query._id = { $nin: idsToExclude };
                        console.log('üö´ Excluding cookies:', idsToExclude);
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Failed to parse excludeIds:', error);
                }
            }
            
            // T√¨m cookie c√≤n slot (< maxUsers)
            cookie = await Cookie.findOne(query)
                .sort({ cookieNumber: 1, usageCount: 1 }); // ∆Øu ti√™n cookie s·ªë nh·ªè v√† √≠t d√πng
            
            if (!cookie) {
                console.log('‚ùå No available cookies found');
                return res.status(503).json({ 
                    error: 'No cookies available. Please try again later.' 
                });
            }
            
            console.log('‚úÖ Found available cookie:', `#${cookie.cookieNumber}`);
            // Assign cookie to user
            await cookie.assignToUser(userId);
            console.log('‚úÖ Assigned cookie to user');
        }
        
        // Check if cookie is expired
        if (cookie.isExpired()) {
            await cookie.releaseFromUser(userId);
            return res.status(410).json({ 
                error: 'Cookie expired. Please try again.' 
            });
        }
        
        // Clean cookie value - remove "NetflixId=" prefix if exists
        let cleanValue = cookie.value;
        if (cleanValue.startsWith('NetflixId=')) {
            cleanValue = cleanValue.substring('NetflixId='.length);
            console.log('üßπ Cleaned cookie value (removed NetflixId= prefix)');
        }
        
        const cookieData = {
            name: cookie.name,
            value: cleanValue,
            domain: cookie.domain,
            path: cookie.path,
            secure: cookie.secure,
            httpOnly: cookie.httpOnly
        };
        
        console.log(`‚úÖ Cookie #${cookie.cookieNumber} provided to user:`, req.user.email, `(${cookie.currentUsers.length}/${cookie.maxUsers} users)`);
        console.log('üç™ Cookie value preview:', cleanValue.substring(0, 50) + '...');
        
        res.json({
            success: true,
            cookie: {
                ...cookieData,
                _id: cookie._id.toString() // Th√™m ID ƒë·ªÉ frontend track
            },
            cookieNumber: cookie.cookieNumber,
            sharedUsers: cookie.currentUsers.length
        });
        
    } catch (error) {
        console.error('‚ùå Cookie error:', error);
        res.status(500).json({ error: error.message });
    }
});

// GET /api/cookies/status - Ki·ªÉm tra tr·∫°ng th√°i cookie c·ªßa user
router.get('/status', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        
        const cookie = await Cookie.findOne({ 
            usedBy: userId, 
            isActive: true 
        });
        
        if (!cookie) {
            return res.json({
                success: true,
                hasCookie: false,
                message: 'No active cookie assigned'
            });
        }
        
        res.json({
            success: true,
            hasCookie: true,
            cookie: {
                id: cookie._id,
                expiresAt: cookie.expiresAt,
                isExpired: cookie.isExpired(),
                lastUsed: cookie.lastUsed,
                usageCount: cookie.usageCount
            }
        });
        
    } catch (error) {
        console.error('‚ùå Cookie status error:', error);
        res.status(500).json({ error: error.message });
    }
});

// GET /api/cookies/preview - Preview cookie KH√îNG assign (d√πng cho retry logic)
router.get('/preview', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { skipCurrent, excludeIds } = req.query;
        
        console.log('üëÄ Cookie PREVIEW request from user:', req.user.email, 'ID:', userId);
        console.log('üìã Request params:', { skipCurrent, excludeIds });
        
        const User = require('../models/User');
        const user = await User.findById(userId);
        
        if (!user) {
            console.log('‚ùå User not found:', userId);
            return res.status(404).json({ error: 'User not found' });
        }
        
        // Build query - t√¨m cookie available KH√îNG g√°n user
        let query = {
            isActive: true,
            $expr: { $lt: [{ $size: "$currentUsers" }, "$maxUsers"] },
            $or: [
                { expiresAt: null },
                { expiresAt: { $gt: new Date() } }
            ]
        };
        
        // B·ªè qua cookie hi·ªán t·∫°i n·∫øu y√™u c·∫ßu
        if (skipCurrent === 'true') {
            query.currentUsers = { $ne: userId };
        }
        
        // B·ªè qua c√°c cookie ƒë√£ th·ª≠ (excludeIds)
        if (excludeIds) {
            try {
                let idsToExclude = [];
                if (typeof excludeIds === 'string') {
                    try {
                        idsToExclude = JSON.parse(excludeIds);
                    } catch {
                        idsToExclude = excludeIds.split(',').map(id => id.trim()).filter(id => id);
                    }
                } else if (Array.isArray(excludeIds)) {
                    idsToExclude = excludeIds;
                }
                
                if (idsToExclude.length > 0) {
                    query._id = { $nin: idsToExclude };
                    console.log('üö´ Excluding cookies:', idsToExclude);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to parse excludeIds:', error);
            }
        }
        
        // T√¨m cookie c√≤n slot - KH√îNG assign
        const cookie = await Cookie.findOne(query)
            .sort({ cookieNumber: 1, usageCount: 1 });
        
        if (!cookie) {
            console.log('‚ùå No available cookies found for preview');
            return res.status(503).json({ 
                error: 'No cookies available. Please try again later.' 
            });
        }
        
        console.log('‚úÖ Found cookie for preview:', `#${cookie.cookieNumber}`);
        console.log('‚ö†Ô∏è Cookie NOT assigned yet - waiting for confirmation');
        
        // Clean cookie value
        let cleanValue = cookie.value;
        if (cleanValue.startsWith('NetflixId=')) {
            cleanValue = cleanValue.substring('NetflixId='.length);
        }
        
        const cookieData = {
            name: cookie.name,
            value: cleanValue,
            domain: cookie.domain,
            path: cookie.path,
            secure: cookie.secure,
            httpOnly: cookie.httpOnly
        };
        
        res.json({
            success: true,
            cookie: {
                ...cookieData,
                _id: cookie._id.toString()
            },
            cookieNumber: cookie.cookieNumber,
            sharedUsers: cookie.currentUsers.length // S·ªë user hi·ªán t·∫°i (ch∆∞a +1)
        });
        
    } catch (error) {
        console.error('‚ùå Cookie preview error:', error);
        res.status(500).json({ error: error.message });
    }
});

// POST /api/cookies/confirm - Confirm cookie assignment (g·ªçi khi login success)
router.post('/confirm', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { cookieId } = req.body;
        
        if (!cookieId) {
            return res.status(400).json({ error: 'cookieId is required' });
        }
        
        console.log('‚úÖ Cookie CONFIRM request from user:', req.user.email);
        console.log('üç™ New Cookie ID:', cookieId);
        
        const User = require('../models/User');
        const user = await User.findById(userId);
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // ====================================
        // B∆Ø·ªöC 1: T√¨m v√† release cookie c≈© (n·∫øu c√≥)
        // ====================================
        const oldCookie = await Cookie.findOne({ 
            currentUsers: userId
        });
        
        if (oldCookie && oldCookie._id.toString() !== cookieId) {
            console.log(`üîÑ User was using old cookie #${oldCookie.cookieNumber}, releasing it...`);
            console.log(`üìä OLD Cookie BEFORE release: ${oldCookie.currentUsers.length}/${oldCookie.maxUsers} users`);
            
            // Release user t·ª´ cookie c≈© - d√πng $pull ƒë·ªÉ ch·∫Øc ch·∫Øn
            const updateResult = await Cookie.updateOne(
                { _id: oldCookie._id },
                { 
                    $pull: { currentUsers: userId },
                    isActive: false,
                    notes: `cookie die, recheck (auto-replaced by #${cookieId.substring(0, 6)}) - ${new Date().toLocaleString('vi-VN')}`
                }
            );
            
            console.log(`‚úÖ Update result:`, updateResult);
            
            // Fetch l·∫°i ƒë·ªÉ verify
            const updatedOldCookie = await Cookie.findById(oldCookie._id);
            console.log(`üìä OLD Cookie AFTER release: ${updatedOldCookie.currentUsers.length}/${updatedOldCookie.maxUsers} users`);
            console.log(`üìù OLD Cookie status: isActive=${updatedOldCookie.isActive}`);
            console.log(`üìù OLD Cookie notes: ${updatedOldCookie.notes}`);
            
            if (updatedOldCookie.currentUsers.length === oldCookie.currentUsers.length) {
                console.error(`‚ùå WARNING: User was NOT removed from old cookie! Still ${updatedOldCookie.currentUsers.length} users`);
            } else {
                console.log(`‚úÖ User successfully removed from old cookie #${oldCookie.cookieNumber}`);
            }
            
        } else if (oldCookie && oldCookie._id.toString() === cookieId) {
            console.log(`‚ÑπÔ∏è User already using this cookie #${oldCookie.cookieNumber}, no need to release`);
        } else {
            console.log('‚ÑπÔ∏è User has no old cookie to release');
        }
        
        // ====================================
        // B∆Ø·ªöC 2: Validate cookie m·ªõi
        // ====================================
        const newCookie = await Cookie.findById(cookieId);
        
        if (!newCookie) {
            console.log('‚ùå New cookie not found:', cookieId);
            return res.status(404).json({ error: 'Cookie not found' });
        }
        
        if (!newCookie.isActive) {
            console.log('‚ùå New cookie is not active:', cookieId);
            return res.status(410).json({ error: 'Cookie is no longer active' });
        }
        
        if (newCookie.isExpired()) {
            console.log('‚ùå New cookie expired:', cookieId);
            return res.status(410).json({ error: 'Cookie expired' });
        }
        
        // ====================================
        // B∆Ø·ªöC 3: Assign cookie m·ªõi (tƒÉng slot +1)
        // ====================================
        console.log(`üìä NEW Cookie BEFORE assign: ${newCookie.currentUsers.length}/${newCookie.maxUsers} users`);
        
        await newCookie.assignToUser(userId);
        
        // Fetch l·∫°i ƒë·ªÉ verify
        const verifiedNewCookie = await Cookie.findById(newCookie._id);
        console.log(`üìä NEW Cookie AFTER assign: ${verifiedNewCookie.currentUsers.length}/${verifiedNewCookie.maxUsers} users`);
        console.log(`‚úÖ Cookie #${verifiedNewCookie.cookieNumber} CONFIRMED and assigned to user:`, req.user.email);
        
        // ====================================
        // B∆Ø·ªöC 4: C·∫≠p nh·∫≠t User.assignedCookie
        // ====================================
        user.assignedCookie = verifiedNewCookie._id;
        await user.save();
        console.log(`‚úÖ Updated user.assignedCookie to #${verifiedNewCookie.cookieNumber}`);
        console.log(`üìã Summary: Old cookie slot decreased, New cookie slot increased, User.assignedCookie updated`);
        
        res.json({
            success: true,
            message: 'Cookie confirmed and assigned successfully',
            cookieNumber: verifiedNewCookie.cookieNumber,
            sharedUsers: verifiedNewCookie.currentUsers.length,
            replacedOldCookie: oldCookie ? {
                cookieNumber: oldCookie.cookieNumber,
                newStatus: 'die, recheck'
            } : null
        });
        
    } catch (error) {
        console.error('‚ùå Cookie confirm error:', error);
        res.status(500).json({ error: error.message });
    }
});

// POST /api/cookies/:id/report-failed - User b√°o c√°o cookie l·ªói (kh√¥ng c·∫ßn admin)
router.post('/:id/report-failed', authenticateToken, async (req, res) => {
    try {
        const cookieId = req.params.id;
        const { errorCode } = req.body;
        const userId = req.user.userId;
        
        console.log(`‚ö†Ô∏è User ${req.user.email} reporting failed cookie:`, cookieId);
        console.log(`üìã Error code:`, errorCode);
        
        const cookie = await Cookie.findById(cookieId);
        
        if (!cookie) {
            console.log('‚ùå Cookie not found:', cookieId);
            return res.status(404).json({ error: 'Cookie not found' });
        }
        
        console.log(`üìä Cookie #${cookie.cookieNumber} BEFORE mark die:`);
        console.log(`   - isActive: ${cookie.isActive}`);
        console.log(`   - currentUsers: ${cookie.currentUsers.length}/${cookie.maxUsers}`);
        console.log(`   - notes: ${cookie.notes || '(empty)'}`);
        
        // Mark cookie as failed
        cookie.isActive = false;
        cookie.notes = `cookie die, recheck - Error: ${errorCode || 'UNKNOWN'} - Reported by ${req.user.email} - ${new Date().toLocaleString('vi-VN')}`;
        await cookie.save();
        
        console.log(`‚úÖ Cookie #${cookie.cookieNumber} AFTER mark die:`);
        console.log(`   - isActive: ${cookie.isActive}`);
        console.log(`   - currentUsers: ${cookie.currentUsers.length}/${cookie.maxUsers} (unchanged - not assigned)`);
        console.log(`   - notes: ${cookie.notes}`);
        
        res.json({
            success: true,
            message: 'Cookie marked as failed successfully',
            cookieNumber: cookie.cookieNumber,
            status: 'die, recheck'
        });
        
    } catch (error) {
        console.error('‚ùå Report failed cookie error:', error);
        res.status(500).json({ error: error.message });
    }
});

// POST /api/cookies/release - Release cookie t·ª´ user
router.post('/release', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        
        const cookie = await Cookie.findOne({ 
            currentUsers: userId,
            isActive: true 
        });
        
        if (!cookie) {
            return res.json({
                success: true,
                message: 'No cookie to release'
            });
        }
        
        await cookie.releaseFromUser(userId);
        
        console.log('‚úÖ Cookie released by user:', req.user.email);
        
        res.json({
            success: true,
            message: 'Cookie released successfully'
        });
        
    } catch (error) {
        console.error('‚ùå Cookie release error:', error);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

