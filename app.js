// ========================================
// Netflix Guest Sharing - Main Application
// Lu·ªìng 2 n√∫t + Chrome Extension Integration + Backend API
// ========================================

// ========================================
// BACKEND CONFIGURATION
// ========================================

const BACKEND_URL = 'https://fourk-sharing.onrender.com';

// ========================================
// CONFIGURATION
// ========================================

const CONFIG = {
    AD_DURATION: 2, // seconds (cho demo, th·ª±c t·∫ø c√≥ th·ªÉ l√† 15-30s)
    NETFLIX_URL: 'https://www.netflix.com',
    NETFLIX_TAB_NAME: 'NETFLIX_TAB',
    COOKIE_FILE: 'cookie.txt',
    // Extension ID s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông khi detect
    EXTENSION_ID: null
};

// ========================================
// DOM ELEMENTS
// ========================================

const elements = {
    // Extension banner
    extensionBanner: document.getElementById('extensionBanner'),
    bannerTitle: document.getElementById('bannerTitle'),
    bannerText: document.getElementById('bannerText'),
    extensionIdDisplay: document.getElementById('extensionIdDisplay'),
    setupLink: document.getElementById('setupLink'),
    
    // Step buttons
    openNetflixBtn: document.getElementById('openNetflixBtn'),
    watchAsGuestBtn: document.getElementById('watchAsGuestBtn'),
    
    // Step status
    step1Status: document.getElementById('step1Status'),
    step2Status: document.getElementById('step2Status'),
    
    // Plan modal
    planModal: document.getElementById('planModal'),
    
    // Ad modal
    adModal: document.getElementById('adModal'),
    adSection: document.getElementById('adSection'),
    watchingSection: document.getElementById('watchingSection'),
    watchingProgress: document.getElementById('watchingProgress'),
    watchingIcon: document.getElementById('watchingIcon'),
    adContent: document.getElementById('adContent'),
    adMessage: document.getElementById('adMessage'),
    adTimer: document.getElementById('adTimer'),
    timeLeft: document.getElementById('timeLeft'),
    progressFill: document.getElementById('progressFill'),
    cancelBtn: document.getElementById('cancelBtn'),
    startWatchingBtn: document.getElementById('startWatchingBtn')
};

// ========================================
// STATE
// ========================================

const state = {
    hasExtension: false,
    extensionId: null,
    netflixTabRef: null,
    netflixTabId: null,
    adCountdown: CONFIG.AD_DURATION,
    adInterval: null
};

// ========================================
// INITIALIZATION
// ========================================

// Listen for extension ready event BEFORE DOMContentLoaded
// to catch early events from inline script
window.addEventListener('NetflixGuestExtensionReady', (event) => {
    console.log('‚úÖ Extension ready event received:', event.detail);
    state.extensionId = event.detail.extensionId;
    CONFIG.EXTENSION_ID = event.detail.extensionId;
    onExtensionDetected(event.detail);
});

// Listen for extension NOT found event
window.addEventListener('NetflixGuestExtensionNotFound', () => {
    console.log('‚ö†Ô∏è Extension not found event received');
    onExtensionNotDetected();
});

document.addEventListener('DOMContentLoaded', () => {
    console.log('üé¨ Netflix Guest Sharing initialized');
    
    // Ki·ªÉm tra extension
    checkExtension();
    
    // Setup event listeners
    setupEventListeners();
});

// ========================================
// EVENT LISTENERS
// ========================================

function setupEventListeners() {
    elements.openNetflixBtn.addEventListener('click', handleOpenNetflix);
    elements.watchAsGuestBtn.addEventListener('click', handleWatchAsGuest);
    elements.cancelBtn.addEventListener('click', closeAdModal);
    elements.startWatchingBtn.addEventListener('click', handleStartWatching);
    elements.setupLink.addEventListener('click', showSetupInstructions);
}

// ========================================
// EXTENSION DETECTION
// ========================================

/**
 * Ki·ªÉm tra xem Chrome Extension ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
 */
async function checkExtension() {
    // Extension detection handled by inline script
    console.log('üîç Extension detection active (handled by inline script)');
}

/**
 * Khi extension ƒë∆∞·ª£c ph√°t hi·ªán
 */
function onExtensionDetected(details) {
    // Prevent multiple calls
    if (state.hasExtension) {
        console.log('‚ÑπÔ∏è Extension already detected, skipping duplicate call');
        return;
    }
    
    state.hasExtension = true;
    state.extensionId = details.extensionId;
    CONFIG.EXTENSION_ID = details.extensionId;
    
    // Update UI - Simple banner
    if (elements.extensionBanner && elements.bannerTitle && elements.bannerText) {
        elements.extensionBanner.className = 'extension-banner show success';
        elements.bannerTitle.innerHTML = '‚úÖ Extension ƒë√£ c√†i ƒë·∫∑t';
        elements.bannerText.innerHTML = 'B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c t·∫≠n h∆∞·ªüng Netflix 4K';
    }
    
    console.log('‚úÖ Extension detected and UI updated successfully');
}

/**
 * Khi kh√¥ng ph√°t hi·ªán extension
 */
function onExtensionNotDetected() {
    // Don't override if already detected!
    if (state.hasExtension) {
        console.log('‚ÑπÔ∏è Extension already detected, skip not-detected handler');
        return;
    }
    
    state.hasExtension = false;
    
    // Update UI - Simple banner with install guide link
    if (elements.extensionBanner && elements.bannerTitle && elements.bannerText) {
        elements.extensionBanner.className = 'extension-banner show error';
        elements.bannerTitle.innerHTML = '‚ö†Ô∏è Ch∆∞a c√†i Extension';
        elements.bannerText.innerHTML = `
            Vui l√≤ng c√†i ƒë·∫∑t Chrome Extension ƒë·ªÉ s·ª≠ d·ª•ng.<br>
            <a href="install-guide.html" style="color: #fff; text-decoration: underline; font-weight: 600;">
                üìñ Xem h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t
            </a>
        `;
    }
    
    console.warn('‚ö†Ô∏è Extension not detected, UI updated');
}

// ========================================
// STEP 1: M·ªû NETFLIX TAB
// ========================================

/**
 * X·ª≠ l√Ω n√∫t "M·ªü Netflix.com"
 * Ki·ªÉm tra v√† m·ªü tab Netflix n·∫øu ch∆∞a c√≥
 */
function handleOpenNetflix() {
    console.log('üìç Step 1: Opening Netflix tab...');
    
    // Reset status
    hideStepStatus(1);
    
    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ tab Netflix ch∆∞a
        if (state.netflixTabRef && !state.netflixTabRef.closed) {
            // Tab ƒë√£ t·ªìn t·∫°i, focus v√†o tab ƒë√≥
            state.netflixTabRef.focus();
            showStepStatus(1, 'success', '‚úÖ Tab Netflix ƒë√£ m·ªü s·∫µn! ƒê√£ focus v√†o tab.');
            console.log('‚úÖ Netflix tab already open, focused');
            return;
        }
        
        // M·ªü tab m·ªõi
        try {
            state.netflixTabRef = window.open(
                CONFIG.NETFLIX_URL,
                CONFIG.NETFLIX_TAB_NAME
            );
            
            // Check if popup was blocked
            if (!state.netflixTabRef || state.netflixTabRef.closed) {
                showStepStatus(1, 'error', '‚ùå Kh√¥ng th·ªÉ m·ªü tab. Vui l√≤ng cho ph√©p popup!');
                showToast('Vui l√≤ng cho ph√©p popup cho trang n√†y', 'error');
                console.error('‚ùå Popup blocked');
                return;
            }
        } catch (error) {
            showStepStatus(1, 'error', '‚ùå L·ªói khi m·ªü tab: ' + error.message);
            console.error('‚ùå Error:', error);
            return;
        }
        
        // G√°n window.name ƒë·ªÉ d·ªÖ nh·∫≠n di·ªán
        try {
            state.netflixTabRef.name = CONFIG.NETFLIX_TAB_NAME;
        } catch (error) {
            console.warn('Cannot set window.name (cross-origin):', error);
        }
        
        // L∆∞u timestamp
        localStorage.setItem('netflixTabOpened', Date.now().toString());
        
        // ƒê·ª£i tab load xong
        setTimeout(() => {
            showStepStatus(1, 'success', '‚úÖ ƒê√£ m·ªü Netflix tab th√†nh c√¥ng! S·∫µn s√†ng cho b∆∞·ªõc 2.');
            showToast('ƒê√£ m·ªü Netflix xong!', 'success');
            console.log('‚úÖ Netflix tab opened successfully');
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå Error opening Netflix:', error);
        showStepStatus(1, 'error', `‚ùå L·ªói: ${error.message}`);
        showToast('L·ªói khi m·ªü Netflix', 'error');
    }
}

// ========================================
// STEP 2: WATCH AS GUEST
// ========================================

/**
 * X·ª≠ l√Ω n√∫t "Watch as Guest"
 * Hi·ªÉn th·ªã modal ch·ªçn g√≥i: Free (ad) ho·∫∑c Pro (20k/th√°ng)
 */
function handleWatchAsGuest() {
    console.log('üìç Step 2: Starting guest flow...');
    
    // Reset status
    hideStepStatus(2);
    
    // Ki·ªÉm tra xem ƒë√£ m·ªü Netflix ch∆∞a
    if (!state.netflixTabRef || state.netflixTabRef.closed) {
        showStepStatus(2, 'error', '‚ùå Ch∆∞a m·ªü Netflix! Vui l√≤ng b·∫•m b∆∞·ªõc 1 tr∆∞·ªõc.');
        showToast('Vui l√≤ng m·ªü Netflix tab tr∆∞·ªõc (B∆∞·ªõc 1)', 'warning');
        console.error('‚ùå Netflix tab not found');
        
        // Highlight b∆∞·ªõc 1
        elements.openNetflixBtn.style.animation = 'pulse 1s ease 3';
        setTimeout(() => {
            elements.openNetflixBtn.style.animation = '';
        }, 3000);
        
        return;
    }
    
    // Ki·ªÉm tra extension
    if (!state.hasExtension) {
        showStepStatus(2, 'warning', '‚ö†Ô∏è Extension ch∆∞a ƒë∆∞·ª£c c√†i. Vui l√≤ng xem h∆∞·ªõng d·∫´n!');
        showToast('C·∫ßn c√†i extension ƒë·ªÉ b·∫Øt ƒë·∫ßu', 'warning');
    }
    
    // Ki·ªÉm tra user plan
    const currentUser = localStorage.getItem('current_user');
    if (currentUser) {
        const user = JSON.parse(currentUser);
        if (user.plan === 'pro') {
            // User Pro: Skip ad, b·∫Øt ƒë·∫ßu xem ngay
            console.log('‚≠ê Pro user - skipping ad, starting directly');
            showToast('‚≠ê Pro user - B·∫Øt ƒë·∫ßu xem ngay!', 'success');
            
            // M·ªü modal v√† ch·ªâ hi·ªán watching section
            elements.adModal.classList.add('active');
            
            // ·∫®n ad section, hi·ªán watching section
            if (elements.adSection) elements.adSection.style.display = 'none';
            if (elements.watchingSection) elements.watchingSection.style.display = 'block';
            
            // Hi·ªán th√¥ng b√°o ƒëang x·ª≠ l√Ω
            showStepStatus(2, 'success', '‚è≥ Pro user - ƒêang k·∫øt n·ªëi Netflix...');
            if (elements.watchingProgress) {
                elements.watchingProgress.textContent = '‚è≥ Pro user - ƒêang k·∫øt n·ªëi Netflix...';
            }
            
            // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu
            setTimeout(() => {
                handleStartWatching();
            }, 500);
            return;
        }
    }
    
    // User Free: Hi·ªÉn th·ªã modal ch·ªçn g√≥i
    showPlanModal();
    console.log('üìã Plan selection modal opened');
}

/**
 * Hi·ªÉn th·ªã modal ch·ªçn g√≥i
 */
function showPlanModal() {
    elements.planModal.classList.add('active');
}

/**
 * ƒê√≥ng modal ch·ªçn g√≥i
 */
function closePlanModal() {
    elements.planModal.classList.remove('active');
}

/**
 * User ch·ªçn Free Plan - Xem qu·∫£ng c√°o
 */
function selectFreePlan() {
    console.log('üì∫ User selected Free Plan - Watch ad');
    closePlanModal();
    
    // Hi·ªÉn th·ªã modal qu·∫£ng c√°o
    showAdModal();
    showStepStatus(2, 'success', '‚è≥ ƒêang xem qu·∫£ng c√°o...');
}

/**
 * User ch·ªçn Pro Plan - 20k/th√°ng
 */
function selectProPlan() {
    console.log('‚≠ê User selected Pro Plan');
    
    // Show confirmation
    const confirm = window.confirm(`üöÄ N√¢ng c·∫•p l√™n Pro Plan?

üí∞ Gi√°: 20.000 VNƒê/th√°ng

B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn Zalo ƒë·ªÉ li√™n h·ªá ch·ªß trang v√† thanh to√°n.

Sau khi thanh to√°n, t√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c n√¢ng c·∫•p v√† b·∫°n c√≥ th·ªÉ xem phim kh√¥ng qu·∫£ng c√°o!

Ti·∫øp t·ª•c?`);
    
    if (confirm) {
        // Redirect to Zalo
        window.open('https://zalo.me/0393434851', '_blank');
        showToast('ƒêang m·ªü Zalo... Li√™n h·ªá ch·ªß trang ƒë·ªÉ n√¢ng c·∫•p!', 'success');
        closePlanModal();
    }
}

// ========================================
// AD MODAL LOGIC
// ========================================

/**
 * Hi·ªÉn th·ªã modal qu·∫£ng c√°o
 */
function showAdModal() {
    elements.adModal.classList.add('active');
    resetAdState();
    startAdCountdown();
    animateAdContent();
}

/**
 * ƒê√≥ng modal qu·∫£ng c√°o
 */
function closeAdModal() {
    elements.adModal.classList.remove('active');
    resetAdState();
}

/**
 * Reset tr·∫°ng th√°i qu·∫£ng c√°o
 */
function resetAdState() {
    clearInterval(state.adInterval);
    state.adCountdown = CONFIG.AD_DURATION;
    elements.timeLeft.textContent = CONFIG.AD_DURATION;
    elements.startWatchingBtn.disabled = true;
    elements.progressFill.style.width = '0%';
}

/**
 * B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c qu·∫£ng c√°o
 */
function startAdCountdown() {
    state.adCountdown = CONFIG.AD_DURATION;
    elements.timeLeft.textContent = state.adCountdown;
    
    state.adInterval = setInterval(() => {
        state.adCountdown--;
        elements.timeLeft.textContent = Math.max(0, state.adCountdown);
        
        // Update progress bar
        const progress = ((CONFIG.AD_DURATION - state.adCountdown) / CONFIG.AD_DURATION) * 100;
        elements.progressFill.style.width = `${progress}%`;
        
        // Update message
        if (state.adCountdown > 0) {
            elements.adMessage.textContent = `Vui l√≤ng ƒë·ª£i ${state.adCountdown} gi√¢y...`;
        } else {
            elements.adMessage.textContent = '‚úÖ Qu·∫£ng c√°o ƒë√£ ho√†n th√†nh!';
        }
        
        if (state.adCountdown <= 0) {
            clearInterval(state.adInterval);
            enableStartButton();
        }
    }, 1000);
}

/**
 * Enable n√∫t "B·∫Øt ƒë·∫ßu xem"
 */
function enableStartButton() {
    elements.startWatchingBtn.disabled = false;
    elements.adTimer.innerHTML = '‚úÖ Ho√†n th√†nh!';
    console.log('‚úÖ Ad completed');
}

/**
 * Animate ad content
 */
function animateAdContent() {
    elements.adMessage.textContent = `Vui l√≤ng ƒë·ª£i ${CONFIG.AD_DURATION} gi√¢y...`;
}

// ========================================
// HANDLE START WATCHING
// ========================================

/**
 * X·ª≠ l√Ω khi user b·∫•m "B·∫Øt ƒë·∫ßu xem"
 * ƒê·ªçc cookie v√† g·ª≠i t·ªõi extension ƒë·ªÉ inject
 */
async function handleStartWatching() {
    console.log('üöÄ Starting Netflix session with auto-retry...');
    
    try {
        // Ki·ªÉm tra Netflix tab ƒë√£ m·ªü ch∆∞a (ph·∫£i m·ªü ·ªü b∆∞·ªõc 1)
        if (!state.netflixTabRef || state.netflixTabRef.closed) {
            showStepStatus(2, 'error', '‚ùå Netflix tab ƒë√£ b·ªã ƒë√≥ng! Vui l√≤ng m·ªü l·∫°i ·ªü b∆∞·ªõc 1.');
            showToast('Netflix tab ƒë√£ ƒë√≥ng, vui l√≤ng m·ªü l·∫°i', 'error');
            closeAdModal();
            return;
        }
        
        // Ki·ªÉm tra extension
        if (!state.hasExtension) {
            showStepStatus(2, 'error', '‚ùå C·∫ßn extension ƒë·ªÉ login. Vui l√≤ng c√†i extension.');
            showToast('C·∫ßn c√†i extension ƒë·ªÉ login', 'error');
            closeAdModal();
            return;
        }
        
        // Chuy·ªÉn sang watching section (·∫©n ad, hi·ªán progress)
        if (elements.adSection) elements.adSection.style.display = 'none';
        if (elements.watchingSection) elements.watchingSection.style.display = 'block';
        
        // T·∫°o retry handler
        const retryHandler = new CookieRetryHandler(
            BACKEND_URL,
            localStorage.getItem('auth_token')
        );
        
        // B·∫Øt ƒë·∫ßu qu√° tr√¨nh login v·ªõi auto-retry
        showStepStatus(2, 'success', '‚è≥ ƒêang k·∫øt n·ªëi...');
        if (elements.watchingProgress) {
            elements.watchingProgress.textContent = '‚è≥ ƒêang k·∫øt n·ªëi...';
        }
        
        const result = await retryHandler.attemptLogin((progress) => {
            // C·∫≠p nh·∫≠t UI d·ª±a tr√™n ti·∫øn tr√¨nh
            console.log('üîÑ Progress:', progress);
            
            if (progress.status === 'trying') {
                if (elements.watchingIcon) elements.watchingIcon.textContent = '‚è≥';
                if (elements.watchingProgress) {
                    elements.watchingProgress.textContent = 'ƒêang ƒëƒÉng nh·∫≠p...';
                }
            } else if (progress.status === 'retrying') {
                if (elements.watchingIcon) elements.watchingIcon.textContent = 'üîÑ';
                if (elements.watchingProgress) {
                    elements.watchingProgress.textContent = 'ƒêang ƒëƒÉng nh·∫≠p...';
                }
                if (progress.errorCode) {
                    console.log(`Cookie l·ªói (${progress.errorCode}), ƒëang th·ª≠ cookie kh√°c...`);
                }
            } else if (progress.status === 'success') {
                if (elements.watchingIcon) elements.watchingIcon.textContent = '‚úÖ';
                if (elements.watchingProgress) {
                    elements.watchingProgress.textContent = 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!';
                }
            } else if (progress.status === 'failed') {
                if (elements.watchingIcon) elements.watchingIcon.textContent = '‚ùå';
                if (elements.watchingProgress) {
                    elements.watchingProgress.textContent = 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.';
                }
            }
        });
        
        if (result.success) {
            // Th√†nh c√¥ng!
            console.log('‚úÖ Login successful, preparing to focus Netflix tab...');
            
            // Clear any warning messages first
            hideStepStatus(2);
            showStepStatus(2, 'success', '‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
            
            if (elements.watchingIcon) elements.watchingIcon.textContent = '‚úÖ';
            if (elements.watchingProgress) {
                elements.watchingProgress.textContent = 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn sang Netflix...';
            }
            
            showToast('üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success');
            
            // Focus v√†o tab Netflix qua extension (c√°ch ch·∫Øc ch·∫Øn nh·∫•t)
            console.log('üîÑ Requesting extension to focus Netflix tab...');
            
            try {
                const focusResponse = await chrome.runtime.sendMessage(
                    CONFIG.EXTENSION_ID,
                    { action: 'focusNetflixTab' }
                );
                
                if (focusResponse && focusResponse.success) {
                    console.log('‚úÖ Netflix tab focused successfully via extension!');
                    console.log('   Tab ID:', focusResponse.tabId);
                    console.log('   Window ID:', focusResponse.windowId);
                } else {
                    console.warn('‚ö†Ô∏è Extension could not focus tab:', focusResponse?.error);
                    
                    // Fallback: Th·ª≠ focus b·∫±ng window reference
                    console.log('üîÑ Trying fallback focus method...');
                    if (state.netflixTabRef && !state.netflixTabRef.closed) {
                        window.blur();
                        state.netflixTabRef.focus();
                        console.log('‚úÖ Fallback focus attempted');
                    }
                }
            } catch (error) {
                console.error('‚ùå Error requesting focus via extension:', error);
                
                // Fallback: Th·ª≠ focus b·∫±ng window reference
                console.log('üîÑ Trying fallback focus method...');
                if (state.netflixTabRef && !state.netflixTabRef.closed) {
                    try {
                        window.blur();
                        state.netflixTabRef.focus();
                        console.log('‚úÖ Fallback focus attempted');
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Fallback focus also failed:', e);
                    }
                }
            }
            
            // ƒê·ª£i 1.5s ƒë·ªÉ user th·∫•y th√¥ng b√°o, r·ªìi ƒë√≥ng modal
            setTimeout(() => {
                if (elements.watchingProgress) {
                    elements.watchingProgress.textContent = 'üéâ Ho√†n th√†nh! Ki·ªÉm tra tab Netflix ƒë·ªÉ xem phim.';
                }
                closeAdModal();
            }, 1500);
            
        } else {
            // Th·∫•t b·∫°i sau khi ƒë√£ retry
            const errorMsg = result.error || 'Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p sau nhi·ªÅu l·∫ßn th·ª≠';
            showStepStatus(2, 'error', `‚ùå ${errorMsg}`);
            showToast(`‚ùå ${errorMsg}`, 'error');
        }
        
    } catch (error) {
        console.error('‚ùå Start watching error:', error);
        showStepStatus(2, 'error', '‚ùå L·ªói h·ªá th·ªëng: ' + error.message);
        showToast('‚ùå C√≥ l·ªói x·∫£y ra: ' + error.message, 'error');
    }
}

// ========================================
// COOKIE MANAGEMENT
// ========================================

/**
 * ƒê·ªçc cookie t·ª´ file cookie.txt
 * PRODUCTION VERSION: Cookie ƒë∆∞·ª£c embed tr·ª±c ti·∫øp ƒë·ªÉ tr√°nh CORS issue
 */
async function readCookieFromFile() {
    try {
        console.log('üîÑ Fetching cookie from backend...');
        const token = localStorage.getItem('auth_token');
        console.log('üîë Auth token exists:', !!token);
        
        // Call backend API to get Netflix cookie
        const response = await fetch(`${BACKEND_URL}/api/cookies/guest`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('üì° Backend response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Backend error:', response.status, errorText);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üì¶ Backend response data:', data);
        
        if (data.cookie) {
            // Backend returns cookie object, no need to parse
            console.log(`‚úÖ Using assigned Cookie #${data.cookieNumber} (${data.sharedUsers} users)`);
            console.log('üç™ Cookie value preview:', data.cookie.value.substring(0, 50) + '...');
            return data.cookie;
        } else {
            console.log('‚ö†Ô∏è No cookie in response, using fallback');
            // Fallback to demo cookie if no cookie from backend
            const DEMO_COOKIE = 'NetflixId=v%3D3%26ct%3DBgjHlOvcAxL2Arigp8V5bErQqO0COTaSWib2zCUeC2qiNuXTYbv1SJ9nhrt-7hEakEDvt7HJVrkyGs09kIVt7M53Z8NzdbE75FOamF5q6XftereeruBU5v4pBNggbg97HNTqBxw2gE-UUt3hzyadHcNbdz8TQKYOtcyEmcBaxoXsAJR13QSyFT2-3RRQyYlM_H0O4BrTAczVvAc3SVKd2mkNtwf2CYjlaEVviS7JEDUFG2o4eMAE3db3aDn62DLw5AXK2C7YaKVfpv7nsfDitbTp1p0apNMByQEqNOq3dusmNVCIuHlH2HVhAiLO8_94BB2I0I49ebiC4XPX0fGYTqGDuU1gCkwYOxhMEQhysBmb8KKfbGdZhYn84_q0xRYcTUi_-DFI3nf8Jb8PogIWMh3o4vRH6oa2RzYwYvHr_RHH3Nifx_f5hKBX4L2u6DYSAcC2H2svlWGy2h-b-1AC4YhO821XH6zEWazzCs6poe0bo4jSuRBDny2Ql_xf0zbaGAYiDgoMzOor99BBEbYgNYcv%26pg%3DBCLYEPK2DJD2BDL7SZZ7JKLCRY%26ch%3DAQEAEAABABSiReww9rblxsEScDlWQSttVWEyFcNQGZc.';
            return parseCookie(DEMO_COOKIE.trim());
        }
    } catch (error) {
        console.error('‚ùå Error fetching cookie from backend:', error);
        
        // Fallback to demo cookie
        console.log('üîÑ Using fallback DEMO cookie');
        const DEMO_COOKIE = 'NetflixId=v%3D3%26ct%3DBgjHlOvcAxL2Arigp8V5bErQqO0COTaSWib2zCUeC2qiNuXTYbv1SJ9nhrt-7hEakEDvt7HJVrkyGs09kIVt7M53Z8NzdbE75FOamF5q6XftereeruBU5v4pBNggbg97HNTqBxw2gE-UUt3hzyadHcNbdz8TQKYOtcyEmcBaxoXsAJR13QSyFT2-3RRQyYlM_H0O4BrTAczVvAc3SVKd2mkNtwf2CYjlaEVviS7JEDUFG2o4eMAE3db3aDn62DLw5AXK2C7YaKVfpv7nsfDitbTp1p0apNMByQEqNOq3dusmNVCIuHlH2HVhAiLO8_94BB2I0I49ebiC4XPX0fGYTqGDuU1gCkwYOxhMEQhysBmb8KKfbGdZhYn84_q0xRYcTUi_-DFI3nf8Jb8PogIWMh3o4vRH6oa2RzYwYvHr_RHH3Nifx_f5hKBX4L2u6DYSAcC2H2svlWGy2h-b-1AC4YhO821XH6zEWazzCs6poe0bo4jSuRBDny2Ql_xf0zbaGAYiDgoMzOor99BBEbYgNYcv%26pg%3DBCLYEPK2DJD2BDL7SZZ7JKLCRY%26ch%3DAQEAEAABABSiReww9rblxsEScDlWQSttVWEyFcNQGZc.';
        return parseCookie(DEMO_COOKIE.trim());
    }
}

/**
 * Parse cookie t·ª´ nhi·ªÅu format kh√°c nhau
 */
function parseCookie(text) {
    // Format 1: JSON object
    if (text.startsWith('{')) {
        return JSON.parse(text);
    }
    
    // Format 2: Cookie string (NetflixId=value...)
    if (text.includes('=')) {
        const match = text.match(/^([^=]+)=(.+)$/);
        if (match) {
            return {
                name: match[1].trim(),
                value: match[2].trim(),
                domain: '.netflix.com',
                path: '/',
                secure: true,
                httpOnly: false
            };
        }
    }
    
    // Format 3: Netscape format (tab-separated)
    if (text.includes('\t')) {
        const parts = text.split('\t');
        if (parts.length >= 7) {
            return {
                name: parts[5].trim(),
                value: parts[6].trim(),
                domain: parts[0].trim(),
                path: parts[2].trim(),
                secure: parts[3] === 'TRUE',
                httpOnly: false,
                expirationDate: parseInt(parts[4])
            };
        }
    }
    
    throw new Error('Unknown cookie format');
}

// ========================================
// EXTENSION COMMUNICATION
// ========================================

/**
 * G·ª≠i cookie t·ªõi extension ƒë·ªÉ inject
 */
async function injectCookieViaExtension(cookieData) {
    return new Promise((resolve, reject) => {
        console.log('üì§ Sending cookie to extension...');
        
        if (!CONFIG.EXTENSION_ID) {
            reject(new Error('Extension ID not found'));
            return;
        }
        
        chrome.runtime.sendMessage(
            CONFIG.EXTENSION_ID,
            {
                action: 'injectCookie',
                cookieData: cookieData,
                tabName: CONFIG.NETFLIX_TAB_NAME
            },
            (response) => {
                if (chrome.runtime.lastError) {
                    console.error('Extension error:', chrome.runtime.lastError);
                    reject(new Error(chrome.runtime.lastError.message));
                    return;
                }
                
                console.log('‚úÖ Extension response:', response);
                resolve(response);
            }
        );
    });
}

// ========================================
// UI HELPERS
// ========================================

/**
 * Hi·ªÉn th·ªã status cho step
 */
function showStepStatus(stepNumber, type, message) {
    const statusElement = stepNumber === 1 ? elements.step1Status : elements.step2Status;
    statusElement.className = `step-status show ${type}`;
    statusElement.textContent = message;
}

/**
 * ·∫®n status cho step
 */
function hideStepStatus(stepNumber) {
    const statusElement = stepNumber === 1 ? elements.step1Status : elements.step2Status;
    statusElement.className = 'step-status';
    statusElement.textContent = '';
}

/**
 * Hi·ªÉn th·ªã toast notification
 */
function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideIn 0.3s ease reverse';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

/**
 * Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n setup
 */
function showSetupInstructions(e) {
    e?.preventDefault();
    
    const instructions = `
üìñ H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T EXTENSION

1. M·ªü Chrome, v√†o chrome://extensions/
2. B·∫≠t "Developer mode" (g√≥c tr√™n b√™n ph·∫£i)
3. Click "Load unpacked"
4. Ch·ªçn folder: NetflixSharingProject/extension
5. Extension s·∫Ω xu·∫•t hi·ªán v·ªõi icon üé¨
6. Reload trang web n√†y

Extension ID s·∫Ω hi·ªán ·ªü banner m√†u xanh khi c√†i th√†nh c√¥ng.

ƒê·ªçc file SETUP.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt!
    `.trim();
    
    alert(instructions);
}

// ========================================
// DEBUG
// ========================================

// ========================================
// EXPOSE FUNCTIONS FOR COOKIE RETRY HANDLER
// ========================================

// Make functions available globally for CookieRetryHandler
window.injectCookieViaExtension = injectCookieViaExtension;
window.state = state;
window.CONFIG = CONFIG;
window.showStepStatus = showStepStatus;
window.hideStepStatus = hideStepStatus;

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üé¨ Netflix Guest Sharing - Initialized        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Lu·ªìng 2 b∆∞·ªõc:                                     ‚ïë
‚ïë  ‚ë† M·ªü Netflix Tab  ‚Üí window.open()                ‚ïë
‚ïë  ‚ë° Watch as Guest  ‚Üí Ad ‚Üí Cookie Injection        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Extension Required: Netflix Guest Helper          ‚ïë
‚ïë  Auto-retry: ‚úÖ (NEW!)                             ‚ïë
‚ïë  Error Detection: ‚úÖ (NEW!)                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

// Expose for debugging
window.netflixGuestApp = {
    state,
    config: CONFIG,
    elements,
    checkExtension,
    handleOpenNetflix,
    handleWatchAsGuest
};
